(det(a)*i)%%29
i = i + 1
(det(a)*i)%%29
i = i + 1
(det(a)*i)%%29
i = i + 1
i = 1
(det(a)*i)%%29
i = i + 1
(det(a)*i)%%29
i = i + 1
(det(a)*i)%%29
i = i + 1
(det(a)*i)%%29
i = i + 1
(det(a)*i)%%29
i = i + 1
(det(a)*i)%%29
i = i + 1
(det(a)*6)%%29
(((solve(a)*det(a)) * 6) %*% enc) %% 29
(dec = (solve(a) %*% enc) %% 29)
dec
decryptHillCipher = function(x, keyLength) {
adj = det(x) * solve(x)
i = 0
while (((det(x) * i) %% keyLength) != 1) {
i = i + 1
}
decryptKey = i * adj
print(decryptKey)
decrypt = (decryptKey %*% x) %% keyLength
return (decrypt)
}
a
b
(a %*% b)%%29
enc = (a %*% b)%%29
dec = decryptHillCipher(enc, 29)
a
decryptHillCipher = function(key, enc, enckeyLength) {
adj = det(key) * solve(key)
i = 0
while (((det(key) * i) %% keyLength) != 1) {
i = i + 1
}
decryptKey = i * adj
print(decryptKey)
decrypt = (decryptKey %*% enc) %% keyLength
return (decrypt)
}
enc = (a %*% b)%%29
dec = decryptHillCipher(a, 29)
decryptHillCipher = function(key, enc, keyLength) {
adj = det(key) * solve(key)
i = 0
while (((det(key) * i) %% keyLength) != 1) {
i = i + 1
}
decryptKey = i * adj
print(decryptKey)
decrypt = (decryptKey %*% enc) %% keyLength
return (decrypt)
}
enc = (a %*% b)%%29
dec = decryptHillCipher(a, 29)
a
b
enc = (a %*% b)%%29
dec = decryptHillCipher(a, enc, 29)
decryptHillCipher = function(key, enc, keyLength) {
adj = det(key) * solve(key)
i = 0
while (T) {
if (((det(key) * i) %% keyLength) == 1) {
break;
}
i = i + 1
}
decryptKey = i * adj
print(decryptKey)
decrypt = (decryptKey %*% enc) %% keyLength
return (decrypt)
}
a
b
enc = (a %*% b)%%29
dec = decryptHillCipher(a, enc, 29)
decryptHillCipher = function(key, enc, keyLength) {
adj = det(key) * solve(key)
i = 0
while (((det(key) * i) %% keyLength) != 1) {
print(((det(key) * i) %% keyLength))
i = i + 1
}
decryptKey = i * adj
print(decryptKey)
decrypt = (decryptKey %*% enc) %% keyLength
return (decrypt)
}
dec = decryptHillCipher(a, enc, 29)
decryptHillCipher = function(key, enc, keyLength) {
adj = det(key) * solve(key)
i = 0
while (((det(key) * i) %% keyLength) != 1) {
print(((det(key) * i) %% keyLength) != 1)
i = i + 1
}
decryptKey = i * adj
print(decryptKey)
decrypt = (decryptKey %*% enc) %% keyLength
return (decrypt)
}
a
b
enc = (a %*% b)%%29
dec = decryptHillCipher(a, enc, 29)
class(1)
decryptHillCipher = function(key, enc, keyLength) {
adj = det(key) * solve(key)
i = 0
class(((det(key) * i) %% keyLength))
#  while (((det(key) * i) %% keyLength) != 1) {
#    i = i + 1
#  }
decryptKey = i * adj
print(decryptKey)
decrypt = (decryptKey %*% enc) %% keyLength
return (decrypt)
}
a
b
enc = (a %*% b)%%29
dec = decryptHillCipher(a, enc, 29)
decryptHillCipher = function(key, enc, keyLength) {
adj = det(key) * solve(key)
i = 0
print(class(((det(key) * i) %% keyLength)))
#  while (((det(key) * i) %% keyLength) != 1) {
#    i = i + 1
#  }
decryptKey = i * adj
print(decryptKey)
decrypt = (decryptKey %*% enc) %% keyLength
return (decrypt)
}
dec = decryptHillCipher(a, enc, 29)
class(1)
decryptHillCipher = function(key, enc, keyLength) {
adj = det(key) * solve(key)
i = 0
class(((det(key) * i) %% keyLength))
while (((det(key) * i) %% keyLength)-1 != 0) {
i = i + 1
}
decryptKey = i * adj
print(decryptKey)
decrypt = (decryptKey %*% enc) %% keyLength
return (decrypt)
}
a
b
enc = (a %*% b)%%29
dec = decryptHillCipher(a, enc, 29)
decryptHillCipher = function(key, enc, keyLength) {
adj = det(key) * solve(key)
i = 0
class(((det(key) * i) %% keyLength))
while (((det(key) * i) %% keyLength)-1 != 0) {
print(((det(key) * i) %% keyLength))
i = i + 1
}
decryptKey = i * adj
print(decryptKey)
decrypt = (decryptKey %*% enc) %% keyLength
return (decrypt)
}
enc = (a %*% b)%%29
dec = decryptHillCipher(a, enc, 29)
decryptHillCipher = function(key, enc, keyLength) {
adj = det(key) * solve(key)
i = 0
class(((det(key) * i) %% keyLength))
while (((det(key) * i) %% keyLength)-1 != 0) {
print(((det(key) * i) %% keyLength)-1)
i = i + 1
}
decryptKey = i * adj
print(decryptKey)
decrypt = (decryptKey %*% enc) %% keyLength
return (decrypt)
}
a
b
enc = (a %*% b)%%29
dec = decryptHillCipher(a, enc, 29)
a = matrix(c(8, 12, 15, 24), ncol = 2)
a
b = matrix(c(22, 17, 14, 3), ncol = 2)
b
b = matrix(c(22, 17, 14, 3), ncol = 2, byrow= T)
b
a %*% b
(a %*% b) %% 26
solve(b)
solve(a)
det(a)
solve(a) * det(a)
i = 0
i = 0
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
solve(a)
a = matrix(c(8, 12, 15, 24), ncol = 2)
a
solve(a)
i = 0
(det(a) * i) %% 26
i = i + 1
i = 0
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
(det(a) * i) %% 26
i = i + 1
solve(a)
(a %*% b) %% 26
enc = (a %*% b) %% 26
solve(a) %*% enc
(solve(a) %*% enc) %% 26
solve(a) * det(a)
((solve(a) * det(a)) %*% enc) %% 26
a
i = 0
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
((solve(a) * det(a) * i) %*% enc) %% 26
i = i + 1
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
sample(c(2:6), size = 1, replace = T)
log(0)
getwd()
setwd("../Desktop/Data/Competition/BaseBall/baseball_csv")
batter = read.csv("2020빅콘테스트_스포츠투아이_제공데이터_팀타자_2016.csv")
pitcher = read.csv("2020빅콘테스트_스포츠투아이_제공데이터_팀투수_2016.csv")
pitcher = pitcher[, -3]
batter = batter[, -4]
colnames(pitcher) = c(colnames(pitcher)[1:2], "T_ID", colnames(pitcher)[4:NCOL(pitcher)] )
colnames(batter) = c(colnames(batter)[1:3], paste("BAT", colnames(batter)[4:NCOL(batter)], sep = '_'))
colnames(pitcher) = c(colnames(pitcher)[1:3], paste("PIT", colnames(pitcher)[4:NCOL(pitcher)], sep = '_'))
head(batter)
head(pitcher)
baseball = merge(batter, pitcher)
for (i in 1:NCOL(baseball)) {
if(class(baseball[, i]) == "character") {
baseball[, i] = as.factor(baseball[, i])
}
}
summary(baseball)
summary(baseball)
baseball = baseball[order(baseball$T_ID, baseball$GDAY_DS), ]
rownames(baseball) = NULL
baseball$WLS = 0
for (i in 1:NROW(baseball)) {
if (baseball$PIT_WLS[i] == 'W') {
baseball$WLS[i] = 0
} else {
baseball$WLS[i] = 1
}
}
baseball = subset(baseball, select = -PIT_WLS)
head(baseball)
summary(baseball)
baseball$GDAY_DS = as.factor(baseball$GDAY_DS)
baseball$BAT_HEADER_NO = as.factor(baseball$BAT_HEADER_NO)
baseball$PIT_HEADER_NO = as.factor(baseball$PIT_HEADER_NO)
summary(baseball)
targetFeatures = colnames(baseball)[-c(1:5, 25:27, 28:31, 54:56)]
for (i in targetFeatures) {
baseball[, i] = unlist(tapply(baseball[, i], baseball$T_ID, cumsum))
}
baseball$dummy = 0
for (i in levels(baseball$T_ID)) {
baseball[baseball$T_ID == i, "dummy"] = 1:NROW(baseball[baseball$T_ID == i, "dummy"])
}
baseball$WLSRatio = baseball$WLS / baseball$dummy
baseball = subset(baseball, select = -c(WLS, dummy))
summary(baseball)
baseball$BAT_AVG = baseball$BAT_HIT / baseball$BAT_AB
baseball$PIT_ERA = (baseball$PIT_ER * 3) / (baseball$PIT_INN2)
baseball$BABIP = (baseball$BAT_HIT - baseball$BAT_HR) / (baseball$BAT_AB - baseball$BAT_KK - baseball$BAT_HR + baseball$BAT_SF)
a = data.frame(cor(baseball[, -c(1:5, 25:27, 28:31, 54:56)], method = "pearson"))
a[, c(42:45)]
plot(baseballPCA, type = 'l')
plot(baseball$WLSRatio, baseball$PIT_ERA)
plot(baseball$BABIP, baseball$PIT_ERA)
score = c(1, 2, 3, 4, 5)
count = c(1, 2, 3, 3, 1)
d = rep(score, count)
mean(d)
plot(baseball$BABIP, baseball$PIT_ERA)
plot(baseball$WLSRatio, baseball$PIT_ERA)
plot(baseball$BABIP, baseball$PIT_ERA)
cor(baseball$BABIP, baseball$PIT_ERA)
plot(baseball$BABIP, baseball$PIT_ERA)
cor(baseball$BABIP, baseball$PIT_ERA)
plot(baseball$WLSRatio, baseball$PIT_ERA)
plot(baseball$BABIP, baseball$PIT_ERA)
